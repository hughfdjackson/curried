!(e => {if("function"==typeof bootstrap)bootstrap("curried",e);else if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeCurried=e}else"undefined"!=typeof window?window.curried=e():global.curried=e()})(() => {
  var define;
  var ses;
  var bootstrap;
  var module;
  var exports;
  return ((e, t, n) => {function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,t => {var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[(require, module, exports) => {"use strict";var collection=require("./src/collection");var array=require("./src/array");var object=require("./src/object");var fn=require("./src/function");var modules=[collection,array,object,fn];module.exports=modules.reduce(object.combine)},{"./src/array":3,"./src/collection":2,"./src/function":5,"./src/object":4}],2:[(require, module, exports) => {
    var curry=require("curry");var r=require("restrictary");
    var unary=r.unary;
    var binary=r.binary;
    var object=require("./object");var negate=require("./function").negate;var isArray=Array.isArray||(val => Object.prototype.toString.call(val)==="[object Array]");var mapObject=(o, fn) => {var r={};for(var p in o)if(o.hasOwnProperty(p))r[p]=fn(o[p]);return r};var filterObject=(o, fn) => {var r={};for(var p in o)if(o.hasOwnProperty(p)&&fn(o[p]))r[p]=o[p];return r};var everyObject=(o, fn) => {for(var p in o)if(o.hasOwnProperty(p)&&!fn(o[p]))return false;return true};var someObject=(o, fn) => {for(var p in o)if(o.hasOwnProperty(p)&&fn(o[p]))return true;return false};var reduceFromObject=(o, fn, val) => object.values(o).reduce(fn,val);var reduceObject=(o, fn) => object.values(o).reduce(fn);var map=curry((fn, val) => {fn=unary(fn);if(isArray(val))return val.map(fn);else return mapObject(val,fn)});var filter=curry((fn, val) => {fn=unary(fn);if(isArray(val))return val.filter(fn);else return filterObject(val,fn)});var reject=curry((fn, val) => filter(negate(fn),val));var every=curry((fn, val) => {fn=unary(fn);if(isArray(val))return val.every(fn);else return everyObject(val,fn)});var some=curry((fn, val) => {fn=unary(fn);if(isArray(val))return val.some(fn);else return someObject(val,fn)});var reduce=curry((fn, val) => {fn=binary(fn);if(isArray(val))return val.reduce(fn);else return reduceObject(val,fn)});var reduceRight=curry((fn, val) => {fn=binary(fn);if(isArray(val))return val.reduceRight(fn);else return reduceObject(val,fn)});var reduceFrom=curry((fn, seed, val) => {fn=binary(fn);if(isArray(val))return val.reduce(fn,seed);else return reduceFromObject(val,fn,seed)});var reduceRightFrom=curry((fn, seed, val) => {fn=binary(fn);if(isArray(val))return val.reduceRight(fn,seed);else return reduceFromObject(val,fn,seed)});module.exports={map,filter,reject,every,some,reduce,reduceRight,reduceFrom,reduceRightFrom}
  },{"./function":5,"./object":4,curry:6,restrictary:7}],4:[(require, module, exports) => {"use strict";var curry=require("curry");var shallowClone=o => {var clone={};for(var p in o)if(o.hasOwnProperty(p))clone[p]=o[p];return clone};var invoke=curry((method, val) => val[method]());var invokeWith=curry((method, args, val) => val[method](...args));var get=curry((prop, val) => val[prop]);var pick=curry((props, val) => {var addProp=(acc, prop) => {acc[prop]=val[prop];return acc};return props.reduce(addProp,{})});var combine=curry((o1, o2) => {o1=shallowClone(o1);for(var p in o2)if(o2.hasOwnProperty(p))o1[p]=o2[p];return o1});var keys=o => {var a=[];for(var p in o)if(o.hasOwnProperty(p))a.push(p);return a};var values=o => {var a=[];for(var p in o)if(o.hasOwnProperty(p))a.push(o[p]);return a};module.exports={invoke,invokeWith,get,pick,combine,keys,values}},{curry:6}],3:[(require, module, exports) => {"use strict";var curry=require("curry");var take=curry((num, arr) => arr.slice(0,num));var initial=a => a.slice(0,a.length-1);var last=a => {if(a.length>0)return a[a.length-1];else return undefined};var head=a => a[0];var tail=a => a.slice(1);module.exports={take,initial,last,head,tail}},{curry:6}],5:[(require, module, exports) => {"use strict";var curry=require("curry");var arr=require("./array");var toArray=arrayLike => Array.prototype.slice.call(arrayLike);var compose=function(...args) {var fns=toArray(args);var lastFn=arr.last(fns);var initialFns=arr.initial(fns);return curry.to(lastFn.length,function(...args) {var seed=lastFn(...args);return initialFns.reduceRight((val, fn) => fn(val),seed);});};var pipe=function(...args) {var reversedArgs=toArray(args).reverse();return compose(...reversedArgs);};var negate=curry((fn, a) => !fn(a));var identity=val => val;var constant=val => () => val;var flip=curry((fn, a, b) => fn(b,a));var tap=curry((fn, a) => {fn(a);return a});module.exports={compose,pipe,negate,identity,constant,flip,tap,curry}},{"./array":3,curry:6}],6:[(require, module, exports) => {var slice=Array.prototype.slice;var toArray=a => slice.call(a);var tail=a => slice.call(a,1);var createFn=(fn, args, totalArity) => {var remainingArity=totalArity-args.length;switch(remainingArity){case 0:return function(){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 1:return function(a){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 2:return function(a,b){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 3:return function(a,b,c){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 4:return function(a,b,c,d){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 5:return function(a,b,c,d,e){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 6:return function(a,b,c,d,e,f){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 7:return function(a,b,c,d,e,f,g){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 8:return function(a,b,c,d,e,f,g,h){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 9:return function(a,b,c,d,e,f,g,h,i){return processInvocation(fn,concatArgs(args,arguments),totalArity)};case 10:return function(a,b,c,d,e,f,g,h,i,j){return processInvocation(fn,concatArgs(args,arguments),totalArity)};default:return createEvalFn(fn,args,remainingArity)}};var concatArgs=(args1, args2) => args1.concat(toArray(args2));var createEvalFn=(fn, args, arity) => {var argList=makeArgList(arity);var fnStr="false||"+"function("+argList+"){ return processInvocation(fn, concatArgs(args, arguments)); }";return eval(fnStr)};var makeArgList=len => {var a=[];for(var i=0;i<len;i+=1)a.push("a"+i.toString());return a.join(",")};var trimArrLength=(arr, length) => {if(arr.length>length)return arr.slice(0,length);else return arr};var processInvocation=(fn, argsArr, totalArity) => {argsArr=trimArrLength(argsArr,totalArity);if(argsArr.length===totalArity)return fn(...argsArr);return createFn(fn,argsArr,totalArity)};var curry=fn => createFn(fn,[],fn.length);curry.to=curry((arity, fn) => createFn(fn,[],arity));curry.adaptTo=curry((num, fn) => curry.to(num,function(context){var args=tail(arguments).concat(context);return fn.apply(this,args)}));curry.adapt=fn => curry.adaptTo(fn.length,fn);module.exports=curry},{}],7:[(require, module, exports) => {"use strict";module.exports={nullary(fn) {return () => fn();},unary(fn) {return a => fn(a);},binary(fn) {return (a, b) => fn(a,b);},ternary(fn) {return (a, b, c) => fn(a,b,c);}}},{}]},{},[1])(1);
});